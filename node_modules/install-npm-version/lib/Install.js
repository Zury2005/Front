"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Install = void 0;
const FileSystem_1 = require("./FileSystem");
const Logger_1 = require("./Logger");
const Npm_1 = require("./Npm");
const Settings_1 = require("./Settings");
const Verbosity_1 = require("./Verbosity");
const fs = require("fs");
const path = require("path");
/*
 * Installs a NPM package with optional settings.
 *
 * @param npmPackage NPM package to install.
 * @param options Optional settings to control the installation.
 */
function Install(npmPackage, options) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!npmPackage) {
            throw new Error('A NPM package to install must be specified. moment@2.22.2 or lodash@4.17.11 are examples.');
        }
        // Initialize settings and logging.
        //
        const settings = new Settings_1.Settings(npmPackage, options);
        const logger = new Logger_1.Logger(settings.Verbosity);
        logger.Write(`Settings: ${JSON.stringify(settings)}`, Verbosity_1.Verbosity.Debug);
        logger.Write(`Install Path: ${settings.InstallPath}`, Verbosity_1.Verbosity.Debug);
        // Bail when the install location already exists and the user has requested to not overwrite.
        //
        if (!settings.Overwrite && fs.existsSync(settings.InstallPath)) {
            logger.Write(`Install skipped because directory "${settings.InstallPath}" already exists and overwrite option is false.`, Verbosity_1.Verbosity.Default);
            return;
        }
        // Ensure the node_modules path exists.
        //
        if (!fs.existsSync(settings.NodeModulesPath)) {
            fs.mkdirSync(settings.NodeModulesPath, { recursive: true });
            logger.Write(`Node modules directory created at "${settings.NodeModulesPath}".`, Verbosity_1.Verbosity.Debug);
        }
        // Create a temporary directory where we will stage the NPM installation.
        //
        const temporaryStagingPath = fs.mkdtempSync(path.join(settings.NodeModulesPath, '.install-npm-version-temp-'));
        logger.Write(`Temporary staging directory created at "${temporaryStagingPath}".`, Verbosity_1.Verbosity.Debug);
        let error;
        try {
            // Install the package to the staging location.
            //
            Npm_1.Npm.InstallPackage(settings, logger, temporaryStagingPath);
            // Fetch the package's official name and use it to copy dependencies into the staged package folder.
            //
            const packageName = yield Npm_1.Npm.GetPackageName(settings, logger);
            FileSystem_1.FileSystem.CopyPackageDependencies(logger, packageName, temporaryStagingPath);
            // Ensure the final installation path is cleared.
            //
            if (FileSystem_1.FileSystem.RemoveDirectoryRecursively(settings.InstallPath)) {
                logger.Write(`Deleted existing directory at final installation path "${settings.InstallPath}".`, Verbosity_1.Verbosity.Debug);
            }
            // Copy staged package folder to its final destination.
            //
            const stagedPackagePath = path.join(temporaryStagingPath, 'node_modules', packageName);
            const stagedFilePaths = FileSystem_1.FileSystem.EnumerateFilesRecursively(stagedPackagePath);
            const finalizedFilePaths = stagedFilePaths
                .map((filePath) => path.join(settings.InstallPath, filePath.split(stagedPackagePath).pop()));
            logger.Write(`Copying staged package "${stagedPackagePath}" to final destination "${settings.InstallPath}".`, Verbosity_1.Verbosity.Debug);
            FileSystem_1.FileSystem.CopyFiles(stagedFilePaths, finalizedFilePaths);
            logger.Write(`Installed ${settings.NpmPackage} to "${settings.InstallPath}".`, Verbosity_1.Verbosity.Default);
        }
        catch (err) {
            error = err;
        }
        finally {
            // Remove the temporary directory before we exit as applicable.
            //
            if (FileSystem_1.FileSystem.RemoveDirectoryRecursively(temporaryStagingPath)) {
                logger.Write(`Temporary staging directory deleted at "${temporaryStagingPath}".`, Verbosity_1.Verbosity.Debug);
            }
            if (error) {
                logger.WriteError(`Error encountered while installing ${settings.NpmPackage} NPM package.`);
                logger.WriteError(error.toString());
                process.exit(1);
            }
        }
    });
}
exports.Install = Install;
