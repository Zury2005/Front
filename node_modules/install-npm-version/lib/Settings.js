"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Settings = void 0;
const Verbosity_1 = require("./Verbosity");
const path = require("path");
const sanitizeFilename = require("sanitize-filename");
class Settings {
    constructor(npmPackage, options) {
        if (!npmPackage) {
            throw new Error('A NPM package must be defined.');
        }
        this.Destination = (options && options.Destination) || sanitizeFilename(npmPackage, { replacement: '-' });
        this.NpmPackage = npmPackage;
        this.Overwrite = (options && options.Overwrite) === true;
        this.UseLocalNpmrcFile = options === undefined || options.UseLocalNpmrcFile;
        this.WorkingDirectory = (options && options.WorkingDirectory) || process.cwd();
        if (options && options.Verbosity) {
            switch (options && options.Verbosity.toLowerCase()) {
                case Verbosity_1.Verbosity.Debug.toLowerCase():
                    this.Verbosity = Verbosity_1.Verbosity.Debug;
                    break;
                case Verbosity_1.Verbosity.Default.toLowerCase():
                    this.Verbosity = Verbosity_1.Verbosity.Default;
                    break;
                case Verbosity_1.Verbosity.Silent.toLowerCase():
                    this.Verbosity = Verbosity_1.Verbosity.Silent;
                    break;
                default:
                    throw new Error(`Verbosity of "${options.Verbosity}" is not supported.`);
            }
        }
        else {
            this.Verbosity = Verbosity_1.Verbosity.Default;
        }
        this.NodeModulesPath = path.join(this.WorkingDirectory, 'node_modules');
    }
    get InstallPath() {
        return path.join(this.NodeModulesPath, this.Destination);
    }
}
exports.Settings = Settings;
