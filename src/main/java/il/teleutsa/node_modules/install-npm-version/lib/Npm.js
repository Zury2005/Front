"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Npm = void 0;
const FileSystem_1 = require("./FileSystem");
const Verbosity_1 = require("./Verbosity");
const childProcess = require("child_process");
const fs = require("fs");
const npm = require("npm");
const path = require("path");
class Npm {
    /*
     * Writes a message to standard output followed by a line break.
     *
     * @param settings Settings controlling which package is inspected.
     * @param logger Entity to use when writing logging messages.
     *
     * @returns Package name as registered in NPMjs.org.
     */
    static GetPackageName(settings, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                // NPM must be loaded before the fetch package metadata function can be made.
                //
                yield Npm.LoadNpm();
                const fetchPackageMetadata = require('npm/lib/fetch-package-metadata');
                fetchPackageMetadata(settings.NpmPackage, settings.WorkingDirectory, function (error, packageMetadata) {
                    if (error) {
                        reject(error);
                    }
                    logger.Write(`Package name is "${packageMetadata.name}".`, Verbosity_1.Verbosity.Debug);
                    resolve(packageMetadata.name);
                });
            }));
        });
    }
    /*
     * Installs a package to the specified location.
     *
     * @param settings Settings controlling which package is installed.
     * @param logger Entity to use when writing logging messages.
     * @param installPath Path to install package at.
     */
    static InstallPackage(settings, logger, installPath) {
        // Before installing, make an effort to copy over and use any NPM config already present.
        //
        FileSystem_1.FileSystem.CopyNpmrcFile(settings, logger, installPath);
        // Initialize child process spawn options.
        //
        const options = {
            cwd: installPath,
            stdio: settings.Verbosity === Verbosity_1.Verbosity.Debug ? 'inherit' : 'ignore'
        };
        const command = process.platform === 'win32' ? 'npm.cmd' : 'npm';
        // Ensure there is a node_modules folder within the install directory. This will ensure NPM installs the package to
        // this location instead of migrating up to parent folders to find a package.json to use when installing. This would
        // lead to the package being installed in another location than our target here.
        //
        const nodeModulesPath = path.join(installPath, 'node_modules');
        if (!fs.existsSync(nodeModulesPath)) {
            fs.mkdirSync(nodeModulesPath);
        }
        logger.Write(`Spawning child process to install ${settings.NpmPackage} at "${installPath}".`, Verbosity_1.Verbosity.Debug);
        childProcess.spawnSync(command, ['install', settings.NpmPackage], options);
    }
    static LoadNpm() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                npm.load(function (error, result) {
                    if (error) {
                        reject(error);
                    }
                    resolve(result);
                });
            }));
        });
    }
}
exports.Npm = Npm;
